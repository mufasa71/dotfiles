" vim: ft=vim

set nocompatible                     " use Vim settings, rather then Vi settings

try
  if has('unix')
    source ~/.vim/plugins_config.vim
  else
    source ~/vimfiles/plugins_config.vim
  end
catch
endtry

filetype plugin indent on

let mapleader=","                    " leader key
let g:mapleader=","
set backspace=indent,eol,start       " backspace deletes like most programs in insert mode
set incsearch                        " show search pattern as it was typed so far
set hlsearch                         " highlight search results
set ignorecase                       " ignore case when searching
set smartcase                        " when searching try to be smart about cases
set laststatus=2                     " always display the status line
set nobackup
set noswapfile
set nowritebackup
set ruler                            " show line and column number of the cursor position
set scrolloff=2                      " start scrolling (n) lines before window ends
set noexpandtab                      " use tabs instead of spaces
set tabstop=2 shiftwidth=2           " softtabs, 2 spaces
set smarttab                         " be smart when using tabs
set number                           " show line numbers
set wildmode=list:longest,list:full  " will insert tab at beginning of line,
set complete=.,b,t,s                 " complete with respect of current buffer, buffer list, tags
set showmatch                        " show matching brackets
set mat=2                            " 2 seconds blink on matching brackets
set autoindent
set smartindent
set wrap
set shortmess+=I                     " no intro text on open
set cryptmethod=blowfish2
set autoread                         " automatically refresh any files that have been edited outside Vim
set secure                           " restrict to exrc
set lazyredraw                       " don't redraw while executing macros (good performance config)
set magic                            " for regular expressions turn magic on
set t_Co=256

" ignore compiled files
set wildignore=*.o,*~,*.pyc
if has("win16") || has("win32")
  set wildignore+=.git\*,.hg\*,.svn\*
else
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
endif

if has('gui_running')
  set guioptions-=m
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guifont=Hack:h10
  set cursorline                           " highlight the current line
endif

" => Colors and Fonts
syntax enable                              " enable syntax highlighting

try
  colorscheme molokai
catch
endtry

set encoding=utf8                          " standard encoding
set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬,nbsp:_ " show invisible characters

" return to last edit position automaticaly
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

" fast saving
nmap <leader>w :w!<cr>

" close the current buffer
map <leader>q :Bdelete<cr>

" clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>

" use very magic mode by default
nnoremap / /\v
cnoremap %s/ %s/\v

" run write with root perms
noremap <leader>W :w !sudo tee % > /dev/null<cr>:e!<cr><cr>

" pull word under cursor into LHS of a substitute (for quick search and replace)
nmap <leader>ss :%s#<C-r>=expand("<cword>")<cr>#

" quick jump to a line which contains word under the cursor
nmap <leader>f [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<cr>

" copy the current word or visually selected into system clipboard
nnoremap <F4> "+yiw
vnoremap <F4> "+y

" replace the current word or visually selected from system clipboard
nnoremap <F5> viw"+p
vnoremap <F5> "+p

" selecting pasted text
nnoremap gp `[v`]

set thesaurus+=~/Documents/mthesaur.txt
set dictionary-=/usr/share/dict/words
set dictionary+=/usr/share/dict/words
set omnifunc=syntaxcomplete#Complete

" some macro
let @x = 'ysw"vf"S)iget'

" supertab
let g:SuperTabDefaultCompletionType = "context"

" index ctags
map <leader>ct :!ctags --exclude="node_modules" --exclude="bower_components" -R .<CR>

" treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" rename current file rename.vim plugin
nmap <leader>r :rename

" autoformat
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_java = '"--mode=java --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" sort line (horizontally)
vnoremap <F2> d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>"'))))

" clean code
nmap <silent> <leader>cc :call <SID>CleanCode()<cr>

function! <SID>CleanCode()
  " preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  %retab          " Replace tabs with spaces
  %s/\r/\r/eg     " Turn DOS returns ^M into real returns
  %s=  *$==e      " Delete end of line blanks
  echo "Cleaned"
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! Start()
  " don't run if: we have commandline arguments, we don't have an empty
  " buffer, if we've not invoked as vim or gvim, or if we'e start in insert mode
  if argc() || line2byte('$') != -1 || v:progname !~? '^[-gmnq]\=vim\=x\=\%[\.exe]$' || &insertmode
    return
  endif

  " start a new buffer ...
  enew

  " ... and set some options for it
  setlocal
        \ bufhidden=wipe
        \ buftype=nofile
        \ nobuflisted
        \ nocursorcolumn
        \ nocursorline
        \ nolist
        \ nonumber
        \ noswapfile
        \ norelativenumber

  " now we can just write to the buffer, whatever you want.
  call append('$', "")
  for line in split(system('fortune 70% vim 10% javascript 20% git'), '\n')
    call append('$', '        ' . l:line)
  endfor

  " no modifications to this buffer
  setlocal nomodifiable nomodified

  " when we go to insert mode start a new buffer, and start insert
  nnoremap <buffer><silent> e :enew<CR>
  nnoremap <buffer><silent> i :enew <bar> startinsert<CR>
  nnoremap <buffer><silent> o :enew <bar> startinsert<CR>
endfunction

" run after "doing all the startup stuff"
autocmd VimEnter * call Start()

function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

hi NeomakeErrorSign     guifg=#F92672 guibg=#232526
hi NeomakeWarningSign   guifg=#E6DB74 guibg=#232526
hi NeomakeErrorSign     ctermfg=161 ctermbg=235
hi NeomakeWarningSign   ctermfg=144 ctermbg=235

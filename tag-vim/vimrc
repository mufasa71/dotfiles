" vim: ft=vim

set nocompatible                     " use Vim settings, rather then Vi settings

filetype off
if filereadable(glob("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif
filetype plugin indent on

let mapleader=","                    " leader key
let g:mapleader=","
set backspace=indent,eol,start       " backspace deletes like most programs in insert mode
set incsearch                        " show search pattern as it was typed so far
set hlsearch                         " highlight search results
set laststatus=2                     " always display the status line
set nobackup
set noswapfile
set nowritebackup
set ruler                            " show line and column number of the cursor position
set scrolloff=2                      " start scrolling (n) lines before window ends
set expandtab                        " use spaces instead of tabs
set tabstop=2 shiftwidth=2           " softtabs, 2 spaces
set smarttab                         " be smart when using tabs
set number                           " show line numbers
set wildmode=list:longest,list:full  " will insert tab at beginning of line,
set complete=.,b,t,s                 " complete with respect of current buffer, buffer list, tags
set showmatch                        " show matching brackets
set mat=2                            " 2 seconds blink on matching brackets
set encoding=utf8                    " standard encoding
set autoindent
set smartindent
set wrap
set shortmess+=I                     " no intro text on open
set cryptmethod=blowfish2
set autoread                         " automatically refresh any files that have been edited outside Vim
set listchars=tab:â–¸\ ,trail:Â·,eol:Â¬,nbsp:_ " show invisible characters

if has("gui_running")
  set guioptions-=m
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guifont=Hack:h10
  set cursorline                       " highlight the current line
  if &shell =~ '\\bash$'
    set shell=bash shellcmdflag=-c
  endif
endif

syntax on
" return to last edit position automaticaly
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
" fast saving
nmap <leader>w :w!<cr>

" close current buffer
map <leader>bd :bdelete<cr>

" clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>

" use very magic mode by default
nnoremap / /\v
cnoremap %s/ %s/\v

" run write with root perms
noremap <leader>W :w !sudo tee % > /dev/null<cr>:e!<cr><cr>

" pull word under cursor into LHS of a substitute (for quick search and replace)
nmap <leader>ss :%s#<C-r>=expand("<cword>")<cr>#

" quick jump to a line which contains word under the cursor
nmap <leader>f [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<cr>

" copy the current word or visually selected into system clipboard
nnoremap <F4> "+yiw
vnoremap <F4> "+y

" replace the current word or visually selected from system clipboard
nnoremap <F5> viw"+p
vnoremap <F5> "+p

" selecting pasted text
nnoremap gp `[v`]

set thesaurus+=~/Documents/mthesaur.txt
set dictionary-=/usr/share/dict/words
set dictionary+=/usr/share/dict/words
set omnifunc=syntaxcomplete#Complete

" some macro
let @x = 'ysw"vf"S)iget'

" easy Motion
let g:EasyMotion_mapping_f = '<leader>}'
let g:EasyMotion_mapping_F = '<leader>{'

" supertab
let g:SuperTabDefaultCompletionType = "context"

" color scheme
let g:molokai_original=1
colorscheme molokai

let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.snippets.json')), "\n"))

" index ctags
map <leader>ct :!ctags --exclude="node_modules" --exclude="bower_components" -R .<CR>

" treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" rename current file rename.vim plugin
nmap <leader>r :rename

" hjkl motions easymotion-plugin
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader><leader>h <Plug>(easymotion-linebackward)
  " 2-chars search motion
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)
map  / <Plug>(easymotion-sn)
omap / <Plug>(easymotion-tn)

" autoformat
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_java = '"--mode=java --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" sort line (horizontally)
vnoremap <F2> d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>"'))))

" clean code
nmap <silent> <leader>cc :call <SID>CleanCode()<cr>

function! <SID>CleanCode()
  " preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  %retab          " Replace tabs with spaces
  %s/\r/\r/eg     " Turn DOS returns ^M into real returns
  %s=  *$==e      " Delete end of line blanks
  echo "Cleaned"
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" restrict to exrc
set secure

function! ToggleVExplorer()
  if exists("t:expl_buf_num")
    let expl_win_num = bufwinnr(t:expl_buf_num)
    if expl_win_num != -1
      let cur_win_nr = winnr()
      exec expl_win_num . 'wincmd w'
      close
      exec cur_win_nr . 'wincmd w'
      unlet t:expl_buf_num
    else
      unlet t:expl_buf_num
    endif
  else
    exec '1wincmd w'
    Vexplore
    let t:expl_buf_num = bufnr("%")
  endif
endfunction

nnoremap <f2> :call ToggleVExplorer()<cr>

function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

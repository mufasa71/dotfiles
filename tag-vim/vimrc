" vim: ft=vim

set nocompatible                     " use Vim settings, rather then Vi settings
filetype plugin indent on

let mapleader=","                    " leader key
let g:mapleader=","
set backspace=indent,eol,start       " backspace deletes like most programs in insert mode
set incsearch                        " show search pattern as it was typed so far
set hlsearch                         " highlight search results
set ignorecase                       " ignore case when searching
set smartcase                        " when searching try to be smart about cases
set laststatus=2                     " always display the status line
set nobackup
set noswapfile
set nowritebackup
set ruler                            " show line and column number of the cursor position
set scrolloff=2                      " start scrolling (n) lines before window ends
set noexpandtab                      " use tabs instead of spaces
set tabstop=2 shiftwidth=2           " softtabs, 2 spaces
set smarttab                         " be smart when using tabs
set number                           " show line numbers
set wildmode=list:longest,list:full  " will insert tab at beginning of line,
set complete=.,b,t,s                 " complete with respect of current buffer, buffer list, tags
set showmatch                        " show matching brackets
set mat=2                            " 2 seconds blink on matching brackets
set autoindent
set smartindent
set wrap
set shortmess+=I                     " no intro text on open
set cryptmethod=blowfish2
set autoread                         " automatically refresh any files that have been edited outside Vim
set secure                           " restrict to exrc
set lazyredraw                       " don't redraw while executing macros (good performance config)
set magic                            " for regular expressions turn magic on
set t_Co=256
set encoding=utf8                    " standard encoding
set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_ " show invisible characters
set thesaurus+=~/Documents/mthesaur.txt
set dictionary-=/usr/share/dict/words
set dictionary+=/usr/share/dict/words
set omnifunc=syntaxcomplete#Complete
set hidden
set wildignore=*.o,*~,*.pyc 					" ignore compiled files

if has("unix")
  set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
  set wildignore+=.git\*,.hg\*,.svn\*
endif

if has("gui_running")
  set guioptions-=m
  set guioptions-=T
  set guioptions-=r
  set guioptions-=L
  set guifont=DejaVu_Sans_Mono:h10
  set cursorline                           " highlight the current line
endif

" => Colors and Fonts
syntax enable                              " enable syntax highlighting

try
  colorscheme molokai
catch
endtry

" return to last edit position automaticaly
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif

" fast saving
imap ;w <esc>:w!<cr>

" escape alternative
imap jk <Esc>

" close the current buffer
map <leader>q :Bdelete<cr>

" clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>

" use very magic mode by default
nnoremap / /\v
cnoremap %s/ %s/\v

" run write with root perms
noremap <leader>W :w !sudo tee % > /dev/null<cr>:e!<cr><cr>

" pull word under cursor into LHS of a substitute (for quick search and replace)
nmap <leader>ss :%s#<C-r>=expand("<cword>")<cr>#

" copy the current word or visually selected into system clipboard
nnoremap <F4> "+yiw
vnoremap <F4> "+y

" replace the current word or visually selected from system clipboard
nnoremap <F5> viw"+p
vnoremap <F5> "+p

" selecting pasted text
nnoremap gp `[v`]

" index ctags
map <leader>ct :!ctags --exclude="node_modules" --exclude="bower_components" -R .<CR>

" autoformat
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_java = '"--mode=java --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" sort line (horizontally)
vnoremap <F2> d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>"'))))

" clean code
nmap <silent> <leader>cc :call <SID>CleanCode()<cr>

function! <SID>CleanCode()
  " preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  %retab          " Replace tabs with spaces
  %s/\r/\r/eg     " Turn DOS returns ^M into real returns
  %s=  *$==e      " Delete end of line blanks
  echo "Cleaned"
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

function! Incr()
  let a = line('.') - line("'<")
  let c = virtcol("'<")
  if a > 0
    execute 'normal! '.c.'|'.a."\<C-a>"
  endif
  normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => EasyMotion
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" move to line
map <leader>L <Plug>(easymotion-bd-jk)
nmap <leader>L <Plug>(easymotion-overwin-line)
" move to word
map  <leader>w <Plug>(easymotion-bd-w)
nmap <leader>w <Plug>(easymotion-overwin-w)
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader><leader>h <Plug>(easymotion-linebackward)
" s{char}{char} to move to {char}{char}
nmap s <Plug>(easymotion-overwin-f2)
nmap t <Plug>(easymotion-t2)
" <leader>f{char} to move to {char}
map  <leader>f <Plug>(easymotion-bd-f)
nmap <leader>f <Plug>(easymotion-overwin-f)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable the list of buffers
let g:airline#extensions#tabline#enabled = 1

" Show just the filename
let g:airline#extensions#tabline#fnamemod = ':t'

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Neovim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:neomake_javascript_eslint_d_maker = {
 	  \ 'args': ['-f', 'compact', '--fix'],
      \ 'errorformat': '%E%f: line %l\, col %c\, Error - %m,' .
      \ '%W%f: line %l\, col %c\, Warning - %m'
      \}
let g:neomake_javascript_enabled_makers = ['eslint_d']
let g:neomake_jsx_enabled_makers = ['eslint_d']

let g:neomake_scss_stylelint_d_maker = {
      \ 'errorformat':
      \   '%+P%f,'.
      \   '%*\s%l:%c  %t  %m,'.
      \ '%-Q'
      \}
let g:neomake_scss_enabled_makers = ['stylelint_d']
autocmd! BufWritePost * Neomake
autocmd! FileChangedShellPost * Neomake

hi NeomakeErrorSign     guifg=#F92672 guibg=#232526
hi NeomakeWarningSign   guifg=#E6DB74 guibg=#232526
hi NeomakeErrorSign     ctermfg=161 ctermbg=235
hi NeomakeWarningSign   ctermfg=144 ctermbg=235

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => netrw
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:netrw_banner = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-racer
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:racer_cmd = '~/.cargo/bin/racer'
au FileType rust nmap gd <Plug>(rust-def)
au FileType rust nmap gs <Plug>(rust-def-split)
au FileType rust nmap gx <Plug>(rust-def-vertical)
au FileType rust nmap <leader>gd <Plug>(rust-doc)

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => emmet-vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
packadd webapi-vim
let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.snippets.json')), "\n"))

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => vim-jsx
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:jsx_ext_required = 0

"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => fzf-vim
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
nmap <leader>t :FZF<CR>
nmap <leader>b :Buffers<CR>

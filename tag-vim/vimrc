" vim: ft=vim

set nocompatible                     " use Vim settings, rather then Vi settings

filetype off
if filereadable(glob("~/.vimrc.bundles"))
  source ~/.vimrc.bundles
endif
filetype plugin indent on

let mapleader=","                    " leader key
set backspace=indent,eol,start       " backspace deletes like most programs in insert mode
set incsearch                        " show search pattern as it was typed so far
set hlsearch                         " highlight search results
set laststatus=2                     " always display the status line
set nobackup
set noswapfile
set nowritebackup
set ruler                            " show line and column number of the cursor position
set scrolloff=2                      " start scrolling (n) lines before window ends
set tabstop=2 shiftwidth=2 expandtab " softtabs, 2 spaces
set lcs=tab:▸\ ,trail:·,eol:¬,nbsp:_ " show invisible characters
set list 
set number                           " show line numbers
set numberwidth=5
set wildmode=list:longest,list:full  " will insert tab at beginning of line,
set complete=.,b,t                   " complete with respect of current buffer, buffer list, tags
set showmatch                        " show matching brackets
set mat=2                            " 2 seconds blink on matching brackets
set encoding=utf8                    " standard encoding
set autoindent
set smartindent
set wrap
set shortmess+=I                     " no intro text on open
set cm=blowfish2

syntax on
" return to last edit position automaticaly
autocmd BufReadPost *
      \ if line("'\"") > 0 && line("'\"") <= line("$") |
      \   exe "normal g`\"" |
      \ endif
" fast saving
nmap <leader>w :w!<cr>
" close current buffer
map <leader>bd :bdelete<cr>
" clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>
" use very magic mode by default
nnoremap / /\v
cnoremap %s/ %s/\v
" run write with root perms
noremap <leader>W :w !sudo tee % > /dev/null<cr>:e!<cr><cr>
" pull word under cursor into LHS of a substitute (for quick search and replace)
nmap <leader>ss :%s#<C-r>=expand("<cword>")<cr>#
" quick jump to a line which contains word under the cursor
nmap <leader>f [I:let nr = input("Which one: ")<Bar>exe "normal " . nr ."[\t"<cr>
" copy the current word or visually selected into system clipboard
nnoremap <F4> "+yiw
vnoremap <F4> "+y
" replace the current word or visually selected from system clipboard
nnoremap <F5> viw"+p
vnoremap <F5> "+p
" selecting pasted text
nnoremap gp `[v`]

set thesaurus+=~/Documents/mthesaur.txt
set dictionary-=/usr/share/dict/words
set dictionary+=/usr/share/dict/words
set omnifunc=syntaxcomplete#Complete

" use the silver searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " use ag over grep
  set grepprg=ag\ --nogroup\ --nocolor

  " use ag in ctrlp for listing files
  " also a lot faster in git projects with respects .gitignore
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'ag %s -l --nocolor -g ""']
  " global quick search-replace with ag aka silver_searcher
  nmap <leader>sr :args `ag -l '<C-r>=expand("<cword>")<cr>' .` \|
        \ argdo %s/<C-r>=expand("<cword>")<cr>//gc \| w<left><left><left><left><left><left><left>
else
  let g:ctrlp_user_command = ['.git', 'cd %s && git ls-files . -co --exclude-standard', 'find %s -type f']
endif

" enable jsx syntax highlighting for js files also
let g:jsx_ext_required = 0

" easy Motion
let g:EasyMotion_mapping_f = '<leader>}'
let g:EasyMotion_mapping_F = '<leader>{'

" ctrlp
let g:ctrlp_custom_ignore = '\v[\/](vendor|node_modules)$'
let g:ctrlp_reuse_window = 'startify'
let g:ctrlp_use_caching = 0

" syntastic
let g:syntastic_error_symbol = "✗"
let g:syntastic_warning_symbol = "⚠"
let g:syntastic_mode_map = { 'mode': 'active', 'passive_filetypes': ['scala', 'haml'] }

" configure syntastic syntax checking to check on open as well as save
let g:syntastic_check_on_open = 1
let g:syntastic_always_populate_loc_list = 1
let g:loaded_syntastic_javascript_jsxhint_checker = 1
" let g:syntastic_javascript_checkers = ['jsxhint']
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

" supertab
let g:SuperTabDefaultCompletionType = "context"

" color scheme
let g:molokai_original=1
colorscheme molokai

let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.snippets.json')), "\n"))

" index ctags
map <leader>ct :!ctags --exclude="node_modules" --exclude="bower_components" -R .<CR>

" treat <li> and <p> tags like the block tags they are
let g:html_indent_tags = 'li\|p'

" rename current file rename.vim plugin
nmap <leader>r :rename

" hjkl motions easymotion-plugin
map <leader><leader>l <Plug>(easymotion-lineforward)
map <leader>j <Plug>(easymotion-j)
map <leader>k <Plug>(easymotion-k)
map <leader><leader>h <Plug>(easymotion-linebackward)
  " 2-chars search motion
nmap s <Plug>(easymotion-s2)
nmap t <Plug>(easymotion-t2)

" autoformat
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_java = '"--mode=java --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" tern
let g:tern_map_keys=1
let g:tern_map_prefix="\\"

" sort line (horizontally)
vnoremap <F2> d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>"'))))

" clean code
nmap <silent> <leader>cc :call <SID>CleanCode()<cr>

function! <SID>CleanCode()
  " preparation save last search, and cursor position.
  let _s=@/
  let l = line(".")
  let c = col(".")
  " Do the business:
  %s/\s\+$//e
  %retab          " Replace tabs with spaces
  %s/\r/\r/eg     " Turn DOS returns ^M into real returns
  %s=  *$==e      " Delete end of line blanks
  echo "Cleaned"
  " clean up: restore previous search history, and cursor position
  let @/=_s
  call cursor(l, c)
endfunction

" restrict to exrc
set secure

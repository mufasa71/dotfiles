" vim: ft=vim

set nocompatible                     " use Vim settings, rather then Vi settings
filetype plugin indent on

let mapleader=","                    " leader key
let g:mapleader=","
let g:netrw_banner = 0
set backspace=indent,eol,start       " backspace deletes like most programs in insert mode
set incsearch                        " show search pattern as it was typed so far
set hlsearch                         " highlight search results
set ignorecase                       " ignore case when searching
set smartcase                        " when searching try to be smart about cases
set laststatus=2                     " always display the status line
set nobackup
set noswapfile
set nowritebackup
set ruler                            " show line and column number of the cursor position
set scrolloff=2                      " start scrolling (n) lines before window ends
set expandtab                      
set tabstop=4 shiftwidth=4           " softtabs, 2 spaces
set smarttab                         " be smart when using tabs
set number                           " show line numbers
set wildmode=list:longest,list:full  " will insert tab at beginning of line,
set complete=.,b,t,s                 " complete with respect of current buffer, buffer list, tags
set showmatch                        " show matching brackets
set mat=2                            " 2 seconds blink on matching brackets
set autoindent
set smartindent
set wrap
set shortmess+=I                     " no intro text on open
set cryptmethod=blowfish2
set autoread                         " automatically refresh any files that have been edited outside Vim
set secure                           " restrict to exrc
set lazyredraw                       " don't redraw while executing macros (good performance config)
set magic                            " for regular expressions turn magic on
set t_Co=256
set encoding=utf8                    " standard encoding
set listchars=tab:▸\ ,trail:·,eol:¬,nbsp:_ " show invisible characters
set thesaurus+=~/Documents/mthesaur.txt
set dictionary-=/usr/share/dict/words
set dictionary+=/usr/share/dict/words
set omnifunc=syntaxcomplete#Complete
set hidden
set wildignore=*.o,*~,*.pyc 					" ignore compiled files

syntax enable                         " enable syntax highlighting

silent! packadd minpac
if !exists('*minpac#init')
else
    call minpac#init()
    call minpac#add('k-takata/minpac', {'type': 'opt'})
    call minpac#add('mattn/webapi-vim', {'type': 'opt'})
    call minpac#add('editorconfig/editorconfig-vim')
    "
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => EasyMotion
    call minpac#add('easymotion/vim-easymotion')

    " move to line
    map <leader>L <Plug>(easymotion-bd-jk)
    nmap <leader>L <Plug>(easymotion-overwin-line)
    " move to word
    map  <leader>w <Plug>(easymotion-bd-w)
    nmap <leader>w <Plug>(easymotion-overwin-w)
    map <leader><leader>l <Plug>(easymotion-lineforward)
    map <leader>j <Plug>(easymotion-j)
    map <leader>k <Plug>(easymotion-k)
    map <leader><leader>h <Plug>(easymotion-linebackward)
    " s{char}{char} to move to {char}{char}
    nmap s <Plug>(easymotion-overwin-f2)
    nmap t <Plug>(easymotion-t2)
    " <leader>f{char} to move to {char}
    map  <leader>f <Plug>(easymotion-bd-f)
    nmap <leader>f <Plug>(easymotion-overwin-f)
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Neovim
    call minpac#add('neomake/neomake')
    let g:neomake_open_list = 2
    let g:neomake_javascript_enabled_makers = ['eslint_d']
    let g:neomake_jsx_enabled_makers = ['eslint_d']
    let g:neomake_typescript_enabled_makers = []
    autocmd! FileChangedShellPost * Neomake
    hi NeomakeErrorSign     guifg=#F92672 guibg=#232526
    hi NeomakeWarningSign   guifg=#E6DB74 guibg=#232526
    hi NeomakeErrorSign     ctermfg=161 ctermbg=235
    hi NeomakeWarningSign   ctermfg=144 ctermbg=235
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    call minpac#add('rust-lang/rust.vim', {'type': 'opt'})

    " => vim-racer
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    call minpac#add('racer-rust/vim-racer', {'type': 'opt'})
    let g:racer_cmd = '~/.cargo/bin/racer'
    au FileType rust nmap gd <Plug>(rust-def)
    au FileType rust nmap gs <Plug>(rust-def-split)
    au FileType rust nmap gx <Plug>(rust-def-vertical)
    au FileType rust nmap <leader>gd <Plug>(rust-doc)
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    call minpac#add('tomasr/molokai')

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => Airline
    call minpac#add('vim-airline/vim-airline')
    call minpac#add('vim-airline/vim-airline-themes')
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    call minpac#add('tpope/vim-unimpaired')

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => fzf-vim
    call minpac#add('junegunn/fzf.vim')
    nmap <leader>t :FZF<CR>
    nmap <leader>b :Buffers<CR>
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    call minpac#add('kana/vim-textobj-entire')
    call minpac#add('kana/vim-textobj-user')
    call minpac#add('airblade/vim-gitgutter')
    call minpac#add('wincent/ferret')
    call minpac#add('tpope/vim-surround')
    call minpac#add('tpope/vim-fugitive')
    call minpac#add('tpope/vim-repeat')
    call minpac#add('mattn/emmet-vim')
    call minpac#add('tpope/vim-commentary')
    call minpac#add('chiel92/vim-autoformat')
    call minpac#add('tpope/vim-abolish')
    call minpac#add('pangloss/vim-javascript')

    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
    " => vim-jsx
    call minpac#add('mxw/vim-jsx')
    let g:jsx_ext_required = 0
    """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

    call minpac#add('moll/vim-bbye')
    call minpac#add('google/vim-searchindex')
    call minpac#add('tommcdo/vim-exchange')
    call minpac#add('chilicuil/vim-sprunge')
    call minpac#add('janko-m/vim-test')
    call minpac#add('cakebaker/scss-syntax.vim')
    call minpac#add('leafgarland/typescript-vim')
    let g:tsuquyomi_completion_detail = 1
    call minpac#add('Quramy/tsuquyomi')
    call minpac#add('lifepillar/vim-cheat40')

    colorscheme molokai
    packadd webapi-vim
    let g:user_emmet_settings = webapi#json#decode(join(readfile(expand('~/.snippets.json')), "\n"))
    packloadall
    call neomake#configure#automake('rw', 1000)
    autocmd FileType typescript nmap <buffer> <Leader>t : <C-u>echo tsuquyomi#hint()<CR>
    " let g:neomake_typescript_tsc_maker = neomake#makers#ft#tsx#tsc()
endif

hi Normal guibg=NONE ctermbg=NONE

command! PackUpdate packadd minpac | source $MYVIMRC | call minpac#update()
command! PackClean  packadd minpac | source $MYVIMRC | call minpac#clean()

if has("unix")
    set wildignore+=*/.git/*,*/.hg/*,*/.svn/*,*/.DS_Store
else
    set wildignore+=.git\*,.hg\*,.svn\*
endif

if has("gui_running")
    set guioptions-=m
    set guioptions-=T
    set guioptions-=r
    set guioptions-=L
    set guifont=DejaVu_Sans_Mono:h10
    set cursorline                           " highlight the current line
endif

" return to last edit position automaticaly
autocmd BufReadPost *
            \ if line("'\"") > 0 && line("'\"") <= line("$") |
            \   exe "normal g`\"" |
            \ endif

" fast saving
imap ;w <esc>:w!<cr>

" escape alternative
imap jk <Esc>

" close the current buffer
map <leader>q :Bdelete<cr>

" clear search highlight
nmap <silent> <leader>/ :let @/=""<cr>

" use very magic mode by default
nnoremap / /\v
cnoremap %s/ %s/\v

" run write with root perms
noremap <leader>W :w !sudo tee % > /dev/null<cr>:e!<cr><cr>

" pull word under cursor into LHS of a substitute (for quick search and replace)
nmap <leader>ss :%s#<C-r>=expand("<cword>")<cr>#

" copy the current word or visually selected into system clipboard
nnoremap <F4> "+yiw
vnoremap <F4> "+y

" replace the current word or visually selected from system clipboard
nnoremap <F5> viw"+p
vnoremap <F5> "+p

" selecting pasted text
nnoremap gp `[v`]

" index ctags
map <leader>ct :!ctags --exclude="node_modules" --exclude="bower_components" -R .<CR>

" autoformat
noremap <F3> :Autoformat<CR><CR>
let g:formatprg_args_expr_java = '"--mode=java --style=java -pcH".(&expandtab ? "s".&shiftwidth : "t")'

" sort line (horizontally)
vnoremap <F2> d:execute 'normal i' . join(sort(split(getreg('"'))), ' ')<CR>"'))))

" clean code
nmap <silent> <leader>cc :call <SID>CleanCode()<cr>

function! <SID>CleanCode()
    " preparation save last search, and cursor position.
    let _s=@/
    let l = line(".")
    let c = col(".")
    " Do the business:
    %s/\s\+$//e
    %retab          " Replace tabs with spaces
    %s/\r/\r/eg     " Turn DOS returns ^M into real returns
    %s=  *$==e      " Delete end of line blanks
    echo "Cleaned"
    " clean up: restore previous search history, and cursor position
    let @/=_s
    call cursor(l, c)
endfunction

function! Incr()
    let a = line('.') - line("'<")
    let c = virtcol("'<")
    if a > 0
        execute 'normal! '.c.'|'.a."\<C-a>"
    endif
    normal `<
endfunction
vnoremap <C-a> :call Incr()<CR>

